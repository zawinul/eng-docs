package it.eng.model.lib;


import it.eng.model.Configurazione;

import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;


public class Model2SchemaJava7 {
	
	public Model2Schema.Schema getSchema(Type t, String genType) throws Exception {
		Model2Schema.ObjSchema s = new Model2Schema.ObjSchema();
		Class c = (Class) t;
		if (String.class.isAssignableFrom(c)) 
			return new Model2Schema.Schema("string");
		if (int.class==c || double.class==c  || float.class==c || long.class==c || Integer.class==c || Double.class==c || Float.class==c || Long.class==c || BigDecimal.class==c || BigInteger.class==c) 
			return new Model2Schema.Schema("number");
		if (boolean.class==c || Boolean.class==c)
			return new Model2Schema.Schema("boolean");

		if (genType!=null && genType.endsWith("[]")) {
			Model2Schema.ArraySchema ret = new Model2Schema.ArraySchema();
			String cname = genType.substring(0, genType.length()-2);
			Class c3 = Class.forName(cname);
			Model2Schema.Schema schild = getSchema(c3,  null);
			ret.items = schild;
			return ret;			
		}
		if (List.class.isAssignableFrom(c)) {
			Model2Schema.ArraySchema ret = new Model2Schema.ArraySchema();
			String cname = genType.substring(genType.indexOf("<")+1, genType.indexOf(">"));
			Class c3 = Class.forName(cname);
			Model2Schema.Schema schild = getSchema(c3,  null);
			ret.items = schild;
			return ret;
		}
		
		for (Field f: c.getDeclaredFields()) {
			Type ft = f.getType();
			Type f2 = f.getGenericType();
			Model2Schema.Schema child = getSchema(ft, getTypeName(ft, f2));
			s.getProperties().put(f.getName(), child);
		}
		return s;
	}

	static String getTypeName(Type t, Type gt) {
		try {
			if (t.toString().contains("[")) {
				Class ct = ((Class) t).getComponentType();
				return ct.getName()+"[]";
			}
			
			if (t instanceof GenericArrayType) {
				GenericArrayType g = (GenericArrayType) t;
				return "generic<"+g.getGenericComponentType().toString()+">";
			}
			if (gt instanceof ParameterizedType) {
				ParameterizedType pt = (ParameterizedType) gt;
				return "<"+((Class)pt.getActualTypeArguments()[0]).getName()+">";
			}
			return ((Class)t).getName();
		}
		catch(Exception ee) {
			System.out.println(t+": error: "+ee.getMessage());
			return "???";
		}
	}
	
	public static class Esempio {
		public Double x[] = new Double[4];
		public Double y = new Double(31);
		public List<Double> z;
	}
	
	private static String toJSON(Object x) {
		ObjectMapper mapper = new ObjectMapper()
			.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
			.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, false)
			.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, false)
			.configure(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY, false)
			.configure(SerializationFeature.INDENT_OUTPUT, true);
		
		return mapper.writeValueAsString(x);
	;
	}
	
	public static void main(String args[]) throws Exception {
		Class c = Configurazione.class;
		Model2Schema.Schema s = new Model2SchemaJava7().getSchema(c, null);
		System.out.println(s);
		
	}
}
